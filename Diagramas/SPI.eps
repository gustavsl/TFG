%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 423.000000 199.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12 (Build 16A320) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 423 199
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 423 199
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /M put
dup 34 /e put
dup 35 /s put
dup 36 /t put
dup 37 /r put
dup 38 /E put
dup 39 /c put
dup 40 /a put
dup 41 /v put
dup 42 /o put
dup 43 /h put
dup 44 /i put
dup 45 /f put
dup 46 /g put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<





00>] def
/CharStrings 16 dict dup begin
/.notdef 0 def
/E 1 def
/M 2 def
/a 3 def
/c 4 def
/e 5 def
/f 6 def
/g 7 def
/h 8 def
/i 9 def
/o 10 def
/r 11 def
/s 12 def
/t 13 def
/v 14 def
/uni2B91 15 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91B2145C684A74C06611B00C1FA345EA5AA002A80B57843F114AFEA920B3EC9BE8C9A878C510DA4DD07F53CD7E2D4262173974D4C6D2B188E1BE25F3AC6CC11DCBCF20BD3CDC848CC174C0E235B986E26FAB78AEA03FCA364CBDAEF34FE2AD4548540AA8E3C4C7EF1246313EB23516D13D66314582BCFA001DA8CE47FB421E4153097C7F70AB918C18A6601A3041B13A7850BD7F048CD3562C1D6A52D23A1AE2AC0A0147C90A51670BC8DE774333423612FA67753E946CDA59B1F4DB39A550592657045378F2817F79B14C46220811B74D5C02F87495E388AACACF7363155C7321884EB2D8A5A7893195EFA2E801D23AE4D3E18CC735F421B84459BCA4CA72E572127A23E09A31E6B50820F8B0E1670724A98798E099F1E69E673ECC5C945D5546FA0CC647729CEF6C5A35BE11BA80AC777B79A4A55643FAB44FD3044D0A883E8B3BBC160C3E18A4F5E0A14806090E7C71A6524D93E31BFC9DD1870B42577562F7FE8840FBE91358E84B610A352814C303D9915014CBEDC874ADDF899D93E72FC05A82B28E3CBAF1F8A9BC8824751AFEE100EA3F6C6BEFEC465D3B16BCEE890612AA3A0AA21AC1C60B807A27A4C2BBA03D5B7DDE3BB1D59B53C6C75D5EAF4A21776571027C9A5FFB574A8F83A646D300B80F9DD8300798666AA03CB660608A92E8CEDF465E0664890CA4F70CDDF4A7D53618722DB31DBFB2A36D85BF9A9FA2C8C1C5D7456EEE58AE79ECE2B3937B7059BEC278FADE2F214E5BD1401DAAA404F439
9A7B622149F2E629253B5A6294EDDF787EE8415A8648565276EA53E18D36DE977052F807F0FABAF8C32B3EB0144E6C6C497F371191FF8A7F2AC165CE6C8D875B9BBD5C9B2FADFDD82990671F487E76E320C66240F1E96B68AC738CADB568E22FA6A4E3CCF2F70A25AB6A7CD06A09A3311D4B132E8F08AD3F038705C755AB7893CE81F53CA69AC36802A19BFC46738F4B1208CF30BB832AB59397EAB0E43DCBE71A3CAEDDBEA4097DE48D6AD2749F862FDF1CB7A3D51EC8DB81B1094915C7183DA935DFE2BA33A29256DB352452C7D3E888CBEF1CCE88978C7536C3D1E95E629298DBEADDE60DE0F3E71D8BCE880221B1959A718CAB0AE934753C3CD47D0363566D74BA2364C95E7893EA3BBE734B574EBDD6864948BDF8F2C43426AF454B819F98BBD393233626CF1F1980DE6561F0F64168C42DDEA042206A38D08D25DD955EFBE5A5307B557C84F221E19032563A7E4D267FDECE54C0454405CC4305598B185B56CD33B180B5438D84668C0DE396F73483E071F01A1876AAF5DA2B032D42A67F35CEA58339E56BD457FA3492C0EBE5F3D9F911088C01320879355C853063BCB12A8363F04F4E821A25A64B5BD78F564A53812AE22B565CF9EBDBAFEA1CD598C355E89A34831635F9B8ACD293276EF44CE63473FAA083E863D8F69F091FF00050F9D23C21C0BE87BF50A93DE620D110A0D209E48A67EE54B532BCC4427033A1B2845A3F27E2E3BCAB8DBE1F7A684608995FDC5A134CCF6B9A13D17E218ED4106D2A82B2233D2A4AB789A5FFCF76ED765144CD5700B6B7A0AD73418C66D7A994194479FB37E932BCB9049373410CF1A72D11968B7D14F6A92BEEBCBDC711E18FFE20703D20C3F7A8D9EFB51E90C895BE069AB68E5DE37A71637D67870D2D509B15CBD143B2135DF73507C3CBEF33BB2EAFCF3108EA75BF0BBDCF70DB1B7A2C4DC806B73B03BD7553AD08E0BB9E665109344BF34ED12F4C7D0DBBECA38F5B2A2658D8727B097AD00EBF1073A7092188FE08F96FBC73BB390910736D528E2FE687A06728699BE385F369789CB6A2EF0D540873AED1D1D5384D80360055B1C6BF97843DCC438EA6228F76DE2FE67C2A916ACA23967F5294117F6A52D987F50716F98B475FBED7213253E3F8A66F8BB0EC4AD8A39DF2ACD84B35847A4CCA7DDFFD942F8FA994354146DB14EAE230305D973BB023FB12FA3129C19808689374B47C6837AE73C154289D288BEBDA262AA0627F413EFE25DE91299F7E0A80CB020265491B6D0297E136F5CC4725788FC7B06E0A6BFAE5AE05CDED19E954A99F187BFD4FF141BA230A78C7FC4A2960A1AAD0D8307434938309EAFD4577B458FA918FFBD46EC65A35E16781DAA9952931A3D4F0A5CE645C4363ED5B97386ADB72A0B90C60A408D29E557933DEE4565146963EBE6AD1404067CE57E5DDEFA18AC34634860C

D6615F0A15C65D0EF52AFE6DA2976C279E6FB6FD7191EC9A0055241F8322860925A481FC43B18064AE130FA8B3EEC2C7471A27485361D9DA221667C462BFB0B5CCF918EF7504876812B9352BE9F8BBA349761F1A80C15A4FB78B05C0592EFA5BEAAE76E2A7E9D483CC00BD3DEC8454D990B91831103940401C541DDBF3255932FCF15872BC18704E55D1BDD8C8223AACC73209C07939CC523E403F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
%RBIBeginFontSubset: HelveticaNeue-Bold
%!FontType1-1.0: HelveticaNeue-Bold 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /M put
dup 34 /I put
dup 35 /S put
dup 36 /O put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -1018 1 index div -481 2 index div 1437 3 index div 1141 5 -1 roll div]cvx def
/sfnts [<



00>] def
/CharStrings 7 dict dup begin
/.notdef 0 def
/I 1 def
/M 2 def
/O 3 def
/S 4 def
/uni2B90 5 def
/uni2B91 6 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-1018 -481 1437 1141}def
/UniqueID 4258367 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C977ACEB10D7B7CCAA782B3E10A4BEAFD6991C7A5E7DAF786CA93E9C7130DEBD28BA4C9AFE41BA199DCE1AC6753B094BA50BE78F8D2A743644DFA47F0F2910179054A72FDE9129E6BEBF60A92E88010565F5B89394C7FD246761E93024E3B2D2D41B71A9F9A70E9AC1DBC7E2F00A88C47169363AE5FCD7A4D050008523C6F54E9831AF210DE6BD0547A05987DCF20FB357BAF2BE5F64263BC72C7257CE05369451D181E3A8C29DFB27645D9D826689DB81FE5A336F1D1DE8A29C262D999D4EEDD8C2B6676BFC241B1054435990AD0FA8B428F2CCC7749B4DBBE5C85D178C1512C8D43938F25F77B021A3B8BA24EDA10BD4570E2E79BE9CB68D322F3481A08E96A2B6A510CA7F8A21389D0AC39CE24FF773BAC704978DD0EA0AB8BB1B01BF0B650CE5CDF19824F7EF53F8F6069CB4FAF20CFF5DC191B898A45DE6A26E7811E09534AAF8133DBAD031F208240B89252D169C67F02096CD899DBAE8D1ECD94192B609AF7CD292F164EC6E6ADD937521D7BCD8E3BD9CCEC1A7BA824F7E42039DC00C334F52CB38D072DFC69E4067AE55833B017D6CB8A9D1426DACC82AA09E5B39D437F6491223D342053DDE8B889016E83D4FAC6600CA1F096152799C7E9AB67F88C4169F577EE83036CB3930DFDD52808F234B9E68BB62C7E9A699EAFDB434F81DB8F0A233440369B26CC7E8D0ABF2E59C70E29BD15B7200CC8912D6155C9974362A7314A850918137FA7420CE0EB2C6203FC234A6A1A384485CD3A3B922CAB520450

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue-Bold cguidfix
/F2.1/HelveticaNeue-Bold renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 423 199 rc
34 165 m
159 165 l
159 10 l
34 10 l
h
34 165 m
f
0.25 w
1 J
1 j
0.60000002 i
0.40000001 0.40000001 0.40000001 sc
1 0 0 -1 -211 490 cm
245 325 m
370 325 l
370 480 l
245 480 l
h
245 325 m
S
0 i
1 1 1 sc
CM
259 165 m
384 165 l
384 10 l
259 10 l
h
259 165 m
f
0.60000002 i
0.40000001 0.40000001 0.40000001 sc
1 0 0 -1 -211 490 cm
470 325 m
595 325 l
595 480 l
470 480 l
h
470 325 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 96.5 172.5 cm
/F1.1[ 18 0 0 -18 0 0]sf
-27.674999 6.2480011 m
(!"#$%")[ 15.678000 9.666000 9.000000 5.670000 5.670000 0.000000 ] xS
1 0 0 -1 321.5 172.5 cm
-32.327999 6.2480011 m
(&#'%\(\)*)[ 10.998000 9.000000 9.666000 5.994000 9.666000 9.000000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
109 135 m
139 135 l
139 119.16666 l
109 119.16666 l
h
109 135 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -211 490 cm
320 355 m
350 355 l
350 370.83334 l
320 370.83334 l
h
320 355 m
S
0 i
1 1 1 sc
CM
109 119.16666 m
139 119.16666 l
139 103.33334 l
109 103.33334 l
h
109 119.16666 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -211 490 cm
320 370.83334 m
350 370.83334 l
350 386.66666 l
320 386.66666 l
h
320 370.83334 m
S
0 i
1 1 1 sc
CM
109 103.33334 m
139 103.33334 l
139 87.5 l
109 87.5 l
h
109 103.33334 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -211 490 cm
320 386.66666 m
350 386.66666 l
350 402.5 l
320 402.5 l
h
320 386.66666 m
S
0 i
1 1 1 sc
CM
109 87.5 m
139 87.5 l
139 71.666664 l
109 71.666664 l
h
109 87.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -211 490 cm
320 402.5 m
350 402.5 l
350 418.33334 l
320 418.33334 l
h
320 402.5 m
S
0 i
1 1 1 sc
CM
109 71.666664 m
139 71.666664 l
139 55.833332 l
109 55.833332 l
h
109 71.666664 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -211 490 cm
320 418.33334 m
350 418.33334 l
350 434.16666 l
320 434.16666 l
h
320 418.33334 m
S
0 i
1 1 1 sc
CM
109 55.833332 m
139 55.833332 l
139 40 l
109 40 l
h
109 55.833332 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -211 490 cm
320 434.16666 m
350 434.16666 l
350 450 l
320 450 l
h
320 434.16666 m
S
0 i
1 1 1 sc
CM
284 135 m
314 135 l
314 119.16666 l
284 119.16666 l
h
284 135 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -211 490 cm
495 355 m
525 355 l
525 370.83334 l
495 370.83334 l
h
495 355 m
S
0 i
1 1 1 sc
CM
284 119.16666 m
314 119.16666 l
314 103.33334 l
284 103.33334 l
h
284 119.16666 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -211 490 cm
495 370.83334 m
525 370.83334 l
525 386.66666 l
495 386.66666 l
h
495 370.83334 m
S
0 i
1 1 1 sc
CM
284 103.33334 m
314 103.33334 l
314 87.5 l
284 87.5 l
h
284 103.33334 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -211 490 cm
495 386.66666 m
525 386.66666 l
525 402.5 l
495 402.5 l
h
495 386.66666 m
S
0 i
1 1 1 sc
CM
284 87.5 m
314 87.5 l
314 71.666664 l
284 71.666664 l
h
284 87.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -211 490 cm
495 402.5 m
525 402.5 l
525 418.33334 l
495 418.33334 l
h
495 402.5 m
S
0 i
1 1 1 sc
CM
284 71.666664 m
314 71.666664 l
314 55.833332 l
284 55.833332 l
h
284 71.666664 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -211 490 cm
495 418.33334 m
525 418.33334 l
525 434.16666 l
495 434.16666 l
h
495 418.33334 m
S
0 i
1 1 1 sc
CM
284 55.833332 m
314 55.833332 l
314 40 l
284 40 l
h
284 55.833332 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -211 490 cm
495 434.16666 m
525 434.16666 l
525 450 l
495 450 l
h
495 434.16666 m
S
4 w
0 J
0.098039217 0.098039217 0.098039217 sc
335 354.875 m
335 335 l
509.98495 335 l
509.98773 340.17499 l
S
2 w
1 1 1 sc
335 354.875 m
335 335 l
509.98495 335 l
509.98773 340.17499 l
S
0 i
0.098039217 0.098039217 0.098039217 sc
CM
298.99463 137.02499 m
303.78775 149.82759 l
294.18774 149.82242 l
h
298.99463 137.02499 m
f
1 w
0 j
1 0 0 -1 -211 490 cm
509.99463 352.97501 m
514.78772 340.17242 l
505.18774 340.17758 l
h
509.99463 352.97501 m
S
4 w
1 j
0.60000002 i
0.098039202 0.098039202 0.098039202 sc
510 450.125 m
510 475 l
335 474.879 l
335 464.82501 l
S
2 w
1 1 1 sc
510 450.125 m
510 475 l
335 474.879 l
335 464.82501 l
S
0 i
0.098039202 0.098039202 0.098039202 sc
CM
124 37.974998 m
119.2 25.174999 l
128.8 25.174999 l
h
124 37.974998 m
f
1 w
0 j
1 0 0 -1 -211 490 cm
335 452.02499 m
330.20001 464.82501 l
339.79999 464.82501 l
h
335 452.02499 m
S
/Cs2 SC
0 sc
1 0 0 -1 209 163 cm
/F2.1[ 11 0 0 -11 0 0]sf
-14.4595 4.3404617 m
(!"#$)[ 9.977000 3.245000 7.139000 0.000000 ] xS
1 0 0 -1 209 28 cm
-14.4595 4.3404617 m
(!$#")[ 9.977000 8.558000 7.139000 0.000000 ] xS
1 0 0 -1 85.5 92.5 cm
/F1.1[ 11 0 0 -11 0 0]sf
-10.3895 -2.3079987 m
(#+,-$)[ 5.500000 6.116000 2.442000 3.256000 0.000000 ] xS
-18.331499 10 m
(%".,#$"%)[ 3.465000 5.907000 6.314000 2.442000 5.500000 3.465000 5.907000 0.000000 ] xS
1 0 0 -1 337.5 92.5 cm
-10.3895 -2.3079987 m
(#+,-$)[ 5.500000 6.116000 2.442000 3.256000 0.000000 ] xS
-18.331499 10 m
(%".,#$"%)[ 3.465000 5.907000 6.314000 2.442000 5.500000 3.465000 5.907000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
