%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 231.000000 187.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12 (Build 16A320) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 231 187
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 231 187
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /one put
dup 34 /zero put
dup 35 /s put
dup 36 /h put
dup 37 /i put
dup 38 /f put
dup 39 /t put
dup 40 /space put
dup 41 /r put
dup 42 /e put
dup 43 /g put
dup 44 /ellipsis put
dup 45 /n put
dup 46 /atilde put
dup 47 /o put
dup 48 /m put
dup 49 /d put
dup 50 /u put
dup 51 /a put
dup 52 /l put
dup 53 /colon put
dup 54 /c put
dup 55 /question put
dup 56 /M put
dup 57 /F put
dup 58 /C put
dup 59 /x put
dup 60 /ccedilla put
dup 61 /iacute put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<




0C00032BB8002E10BA0001000200032BB8000110B8000210B80038D0B800382FBA000400020038111239B8000210B80015D0411B0006002E0016002E0026002E0036002E0046002E0056002E0066002E0076002E0086002E0096002E00A6002E00B6002E00C6002E000D5D410500D5002E00E5002E00025DBA0021000C002E111239B800212FB80020DCB8000110B8003EDC00BA001B002600032BB8001B10BA0007003300032BB8000710BA0029001100032BB8002910303125112315232E0123220E0215141E02333236373315140E0223222E0227231E0333323627222E0235343E0233321E0215140E0201FE5001175231435C38181D3A563A3259160211263A2A152E271B015502283D4B247C74EE2A38220E11253A292838231011243B2C01D94A2B2B334F612E355F472A2D30222B48331D091420172A3A24107E98233946232544341F20354222244839230000010040000001EC02CA001A0051BA001A000000032BB8001A10BA000E000B00032BB8000E10B8001A10B80002D0B8001A10B80018D0B800182F00B800002FB800012FB8000C2FBA0013000800032BB8001310BA001900010000111239303113113311343E0233321615113311342E0223220E02072311405513263927313855112A443317312D240A0202CAFD360124233B2C183830FEA201542A45321C0A1521180111000200450000009A02CA00030007002FBA0001000200032BB8000110B8000210B80004D0B8000110B80006D000B800052FBA0001000000032BB800011030311335231D011133119A5555026268685DFDFB020500000100450000009A02CA00030017BA0003000000032BB800031000B800012FB800002F303113113311455502CAFD3602CA00000000010040000003150211002A00B7BA0003000000032BB8000310B8000DDC4103005F000D00015D4103008F000D00015D41030020000D00015D410300B0000D00015DB80010DCB80018DC4103008F001800015D4103005F001800015D41030020001800015D410300B0001800015DB8001BDCBA0023000D0010111239B8000310B80028D0B800282FBA002900000003111239B8001B10B8002CDC00B800012FB8000E2FB800192FBA0026000800032BB8002610B8000810B80013D0B8002610B80020D0303113113311343E0233321E0215113311343633321E0215113311342E02232206072E01232207233540550F2135251D25160955483F1F27160855192D3F2733551A104E306D3A020205FDFB01420F2D2A1E111F2A19FEAD01423C48121F2A18FEAD017B283924112E2A3028584C00000000010040000001EC021100170045BA0003000000032BB8000310BA000E000B00032BB8000E10B8000310B80015D0B800152FBA00160000000311123900B800012FB8000C2FBA0013000800032BB80013



00>] def
/CharStrings 34 dict dup begin
/.notdef 0 def
/space 1 def
/zero 2 def
/one 3 def
/colon 4 def
/question 5 def
/C 6 def
/F 7 def
/M 8 def
/a 9 def
/c 10 def
/d 11 def
/e 12 def
/f 13 def
/g 14 def
/h 15 def
/i 16 def
/l 17 def
/m 18 def
/n 19 def
/o 20 def
/r 21 def
/s 22 def
/t 23 def
/u 24 def
/x 25 def
/atilde 26 def
/ccedilla 27 def
/iacute 28 def
/acute 29 def
/ellipsis 30 def
/dotlessi 31 def
/tilde 32 def
/uni2B91 33 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C55432D4F3B2AF89AB3F665ECA680A77DAF4133DE184E6EBA4604BFE1FA858A70F2137C660623AEE7F168F431A14901456B78240BBC8442BEA95D43C42F15C28552B95BDC7A033A0811DEE4140AE10210E19953EE280D45F808915F4AA02042371159C01232990F88F889202AFD93F87F9ED337908F6D46208D40DA1C6548ACC337F5715B107855156352734B1962E35B9D1B413688F7F0D08BFB1C6B6C9D0DAD9AE947D5E16D227605B5A0D45D0B2E3AB5320E01F2441A8FD7F7E45F5BCA9A59C7D823D58E9CADEAF4574A1A025911D0B863ECCCEA51666BEDA8867E1FBCE272AC3271388714CFE897E790EC01D7DD5A3C0775C793848EFD90FAED9721AC158D00C42C4316DEC26B8CA6EB579B0A6ACFF09EE675DDAD82067D5AC0FBD6791000946999EE2563094CA5BC91DC97A5A8588DB6A194ABF3F923B48E3F3D9CBB8237674F83ADD5EEFA40FE5CBD9B6D0430F4BBF720006674EF3E63612A17C57DF782DEC050CA825EC491D1619DF098958D275DC8C66F9EBA3DD7BD86F3F8EC66345E5C1B198297E6764C40441451E68A8B6DE7768D5104DED19DD321AD19CC993C51202115B280E533F8C5D8C263256341CA0527DFBFD56FEE5A275F0B8C03AE6A50FB96AAB2CFD6D3860A2EC566863EEEEF4DD14BF75E71B337EB238A36CEF79E91781437268CF8BE407A8FFE33E9919849E4AA277BCBA7202B08B8C172603EEA77FBB60A5FA10A04875967290CED58E1EF525B33CA37B05969DBC43A4A880FA18E0C0B9D0E4A806F6966585A8645C7584E70F1731A8F7D5F990BC32A670DDC877F0E051B5
AA2CB2D13CDD376A5818F841E4162A72F5E29305D3707304D291386BBEC3B55429875416015CD5D894891C0A1E24C5D5D645E8EBDB5A968ED158FE982C520DDD3507BB14C99B107F153E5773F7349548E6F1F09BD5EE8F817B7B2671E38E9EB8FD2EA68CFAB9F47D241FEEF8C758ACF083C73C6CD44A7C5496D89992C8E7344735C6CF400E3EE45EC2731A4A8F18D4155390998F88024D1A4F0426168A957099CDE9CF85F3875CE61250B7C78B408056511775EC3C06633F7C6E3A8B2F87EA29B29481B4969F224BE4E0E7358D20670B97EF97B936C09A10540369C65D47A0D2B637546889B4F564A0507CA73F43629A72C03307FC5785CEA42B1FC4B58A614D765D56355A50212769EEEDAC3C19D06FFD806726F71E0DC8E33B7FC67E37B6F3E676F5F60D0C06C72B797D73A339CEFEA3E234EF7412CE0CA0802879B833E94440C9E0FD5B3B085E0FA7D3BB1ACAFE49D62BB012BF5C28055876A5707D16EE76F102066937C9CFFD5B676CD6EB88E6EA130DB1F6D97B9B08F970AEB689684AB278EF682864B9B64D5809D0DA5DC3BF2DAC647537F7B358C18F0295E8C42098B8A94E2654B29D247E0AE1E51B9E620EBC0B9A53A96E1DF7DC34623A9E34CF304C94E2B5FAF0D6283A02937871C405C59C703172AE30CE0F77347E290928B3D6A7FB7EA2F3A5798DABE3039A43CAE5A2CF6531B1AB243FF9681D57DA3501324E7F4C497A6F804E55247B99CFB7A66E18351823285864964D63B07862FDD977F9020F7B5832171D73A8C68ABE7633E23B36D9B142F95EB34F964EAA5357233F725072133CD2A6D3B3E5D97F9383B97A073AF1D3068BA9BF5715192D8984718DE4A83F6BEFBCAB5B2D16CC460BB5A7073226DF7DEAEA1F9763F7C0F182A901FC03D9DB2E9348783B9746F720C8CC501A0B32DAB24287D1D49447B7C0A2F5A1EAD4E3FB4251486424A2A4690EEB368C7B88E4200F2AA04F4556E13A57443B573189C46BDAA721832A6DFF555FCD30A429B74BABEA48B952D5BFB332D0894294BC1CC9DED231BB0A05CF38ED5D5D41E34F91D41118E82B8352D21F66BD000E25C3AD7A852C65CAB390B8B114F7885625460A2DF05BCC53E083363B1DFEED63E40AC9BA490727DEA48E1B159FCC252397B5C72579AA6AF03CC8937604F2319F5C16DF2FA2EEC8CF538370C29BC102028D378C2D2F02525237B12D78006BAD1B51FC7C9846911C0F3F08C18F6031B4DFE466E62769B4188F8DE17A4E27E36920B946735F1C45905780B5625BFB7F75A827A133CF0BA9D16F1F2920C05CEA4DEFC157BD892D2559BFDC958CE748343720568D31932EA5AD141DEE0B086D19809336ADD5E3065E149052802E3DE5B4970E0CD33EDDFA1A993FDDEC8F45EEA7A55673F958853876CD1F0C1B37F5A61968D705F4C88709FDB970F7219D6DEFF15AACBC97018C

40EA427307AA1AF28839D7AEB7B1794A6CDCCACEA3BCFFCDB18227D8F24566DBD17E78D2F0137824194C43D3F390FD229B4AF731C7261645F0775C08CDB90AA9D3C93FA105B9B5DA22E66E61C8282CB3FED8856205D7ABA77ECA2BC0B8B9C5F7A8FCC580811F5694FAC4B21B70A656B44B68E914A8A89F620D3BD594CEB73DB2EA624767AC5760273B028EAA2A683EFFFAEEA24CB2637049AA4E182D0B943EE5597FDFF2E434D2590EFA1A1E4CBE4AC4AC9AA16A4C1825DA3369CBF0FAF0DA5808021E9EA8C2011CD12607C9F5075D2E3B37EF38DBC306471A73734D733C3DC1B3D98D851D137A8CA0023C4B269549630C84FA61D3FB3CC2E5C8EB8F467060141F58F451B01F00DE4EBBE13D140DDFC4A915DC4D92C8F435E02078895303F9FE403EDC0692470FAA19764F0970C3685CC14E8C41794164D069497E83B7C46DB36109DEC07C8C1EEBD6FF9A2FB1FDAEC58C51194DF99AA2C5E86178DAA53D02005B48613354C8A84B0A20A0DFCCFFB2B97819151924C144E58929F339438F06F84526FCA72EF047D70FB8549B9EFACBE7665BB02CC925D93CB7579B602CF3EB6D7E4BCB370A958705F1689FA3A50D1ECE13A4477A31AE98AAF7F260063FBC6A7803A425538DD4EDE060503035D9839256AA035D12E88EA267F1E2F84CECC808CA55453515D05A236ECE49D231457D342283A69C89EAAA8C38BF9741C4DF28FF1AE6EE1D8530A8B1244308F83B6F29682C91A7CB4798AD94F88E7CC5481F7DE55CDFBDA0BE1C1C6B509E3E981DB2CB746E60648F71AE2154AC2659D7C9E16FD5811A9327EB03CD2CE31B91B33CC8C52663D3171AF94533BAF5A25D705052E525071E5D29DB08A0CAD0F1C7C6F4FDBC12EEFAF2F5735C1DEEC4E2159E5894EEE82C7EDE88DD8B2DCECA6E9DE8DA25F646F7A276DA31A08A94D7BE8482EC026A84C6F56042AB183410E436C217A91805E27830867D7CC6C7AC92F16745E3B627A43D7BCD794556508A35BCEF137EF25E88C5CD013B7C0C74DD4E402D811ED394F4F5F291BC7EF024FAA49A5A05AF39BBA53E5ADE3CB43A25CEC9478BC1CB9A3A9DEFEA32E209BCA562CC75DA02133D215CBA0E37342F9EB33DF0DC98E5678BBC0CBE32E7D2695853E33EDD8BFD135EDD35B7F51BBEF29BF19E17CA2EB64E466E8D81684363D8D4968802C70CA4A8DFD1383EDB63464DD345F01965F16BA2D5DE965CEF576965C7BC96F4321BB661BF0407D4A1F4FA28E4E9808D5A3C681FBA0EF971E98A7305CB61F0839F4D664AE49E28476EA83C618F130AAA3E27F7062A229464452F59E372DF40B1002937D309032E80D10DDB5695495081E16C902F90F19791BB5E1E1EEB3070FAF2DAAAB3FD68B8409585EFC743DF047720392C5CFA88FA699286E70B89C8C9CC982982C41BF180C83B6DF0146A1C6A673042F5BC5E3169F7
BADA64A864CFD25EBEA04639A0B26DB962619176F16EB61C24C9F7DA45E828FA9560E4B3374AF6DB7F7A1AB432E8B8C4B1067C92851F9400B17A3B0723EFD2210F7F10AF2535A6575E622796A2AF64D0E382719D15C77823A26DDE7B83838BE33AE92F6D298CC1E2E94B5B3715181BB43AF6C99424BE77EA689D329272AAB199A2B7DD942B17775F0B9DE37D760487B2A514AB95E5D5A38367A1ACC91C58C63611FF7B0788C25B4D2B52B8E2433055735A50FEB7A306CE42706EBEDD71F125A57C087F54278762B2C7E497F69A5E803DD3ECBF075BC92D78BE80C067FE10A36EB884A15BE739851A2AB85344751A093C309C1259D66AD12BE87B792E59AA4FC4E8CFB4DBFD5F6D3F25D3B3FB28DF62028C91F223093FEBBE37BB5BABB0A70096168F2C95BA7A4125591F419020536F7CE891759F432F1EBF887E5DE91481A089512C70E1D82C0940C454176B951A299B515363909A3D5259D97DA2643B4171057EC82C2906419BBC659853D77CCCBEDBDF5A63230D8AE53327CFBE4076015E5FB989621B7E0C9F8518E87DE5FDADE135C3D3C67D3A16B851DBECA6BCDB768A886FF1465205304A78D0B47272355D3462882B79283A55188366C532ED2CFBC3AB209EABC3484BA774FE2D01EF2B5273E994DB9D7C3698AA2248EE1DD414294F5EE291E25DD52EBE6DFAAC9DB181ECACF9F9714E54C700218393034B7099A9B53D3529584AFA052C1E6893CD4DEDA2E1806833BF82B0BDD6621555B04A086E123F294D391CA893226264F94E71F547FCAE129EDC3BF62B10EEB3180EEAF24DB64E99D5E6C3CA2A5A3829170AEB33A65FCC02A21E0AB3DE1D653B9CE7C0C142B5DEE21088E385A1244F84D43FCEFE88BF3D23E5195804D403CA8A6285B48E55C0419C4B10D2EC6D8364C5F2BD9BC44116A3ED70A5DFE5DE12675C049B178F4696011C6460C10D644108F735215767A8A41564DE45F2A588AEDF05B31FAC10507F5894D3C6B1229025CBD3D5599575E956F67F6F45920C993ABAB55ED85CD6CEF8785E8A7E54DFBC780F895DB81FE5FD8B8C542F82EC908D63516F6C0C7AD5EEB15FA449F42764FFB2B5C7EB08CDB4F08D0DD19B16693B98FEECA24ACFA1978DDBB5764AC44D367BD0E6FCB06FE0C84B068D53C28B457131DBFE53E8BB3B5B577294C4D324CE94008B0D18FC912CDEF385F88B0CA1400163D578C68F119353D3B810C2DB499BD411CF5CA7C0844F4ACCFFD6100B49A0E2DE51B33F4CECE52053E9C2B906B8EFA441F9132727798335CFD0648E5E766C25F51271740A3FC42B7EC61E4D8EACAD9F7307FE838E44D87922D14CBA66835ACDD5993642CB17975038976DA4B262D3A0BB7578D6039F7E5B536FA65173C227434681A414FB8F80B099269F35AC341C0A804E420CCB2A3C041229DCF6AA26ECB278876D786F65F51DA4591B
673189648BED41D4C1A8F6FFC2AB00E4D4CC76CE292EEBBCA3EA0B2C22A04A0C458BEB3838DEDBE8643239E4B6C0DAB580375ED00F97AD7F6CAF93DBEEF1C732F6E62A0980768935FF183012F6DC7DC658D879B3B6EC9382581CA357918A248C8B0E29AB012C1FF8701AAA2B711B4D4F6225DC6C989B47AD72CFC32591D53B114422DD60C6A7CA1C606F56F188CBDC2E3217889205C2C2F9B707343D8D8F173DCD8192A242BD100E68AB916E1621567459C4CAC5BE8B3C8A393399D7D9C44F7259EDE5B15F7C6DADCA7DACEF57E3560EC43F2C9F9208C50306E46B103D0DB8415853A1A81CE2223598BCF6F2FCD62F9C0B6819154622434687AFC28801B897615788906F025923EA18AF2EBFBEB3553E6B30E1103E7DE66707D490B7CCA2322CA61514F8E5CA6A9A4A9E1BFB028D3A36EA2AD4A4A8690864F81BABA1F088CC554B436F5E103B9A30642B0FAF36F70CD2B71831A27010E80FDB458DD8235B92D4A4D6563E32CFEFBC239D9F8766F559927D63FCDA7FAA8C65530BE468138C740D34A107C675C2EFE5B61955C06EFA45C517036BFC77112C6E1AE938318921E3E3B3A45CFDEA8A649E3B858EFF67CC962888F9AB2021F3A92B64FE1C0C355C9616A028E9D8496FA8CB6ED0FC89625362F2199E016E01E1B0F305648602FA23C51A616139A817E6B3DED0B917DE43146A8C848ECB4E1601B5054C8E020E68C514419EDDA3A68AAED5C079E62673F1B418F3ECA9C38FBCC0E0C738675F040E389617AC348C201C6F43E02E070A9D2C29145D2361C0375E19C8037D430CFBFCA9F464027A0419B45F727B580FD6F0A567B9E22B9BC210A73CD93C5D61CC9BA1B8F924BC12AF33E0E407BF6E2F236E2CB5E942828AAC123F71DE14705B72AC7E4B3B864FCCD78D9C2F143658001911230A0A84546E7821D8B6AA866CBC2D4726A2F23E2DD63602C3C181DCB528DAD586FA76EFC01E8F1F0C5C3CB4CFEBA77AF2E4CA543B13F53D1C8EEF0AE9F48D83891873C4330532A2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 231 187 rc
41.497486 24 m
51.497486 24 l
51.497486 14 l
41.497486 14 l
h
41.497486 24 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -56 329 cm
97.49749 305 m
107.49749 305 l
107.49749 315 l
97.49749 315 l
h
97.49749 305 m
S
0 i
1 1 1 sc
CM
32 24 m
42 24 l
42 14 l
32 14 l
h
32 24 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -56 329 cm
88 305 m
98 305 l
98 315 l
88 315 l
h
88 305 m
S
0 i
1 1 1 sc
CM
187.49748 24 m
197.49748 24 l
197.49748 14 l
187.49748 14 l
h
187.49748 24 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -56 329 cm
243.49748 305 m
253.49748 305 l
253.49748 315 l
243.49748 315 l
h
243.49748 305 m
S
0 i
1 1 1 sc
CM
89 24 m
99 24 l
99 14 l
89 14 l
h
89 24 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -56 329 cm
145 305 m
155 305 l
155 315 l
145 315 l
h
145 305 m
S
0 i
1 1 1 sc
CM
70 24 m
80 24 l
80 14 l
70 14 l
h
70 24 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -56 329 cm
126 305 m
136 305 l
136 315 l
126 315 l
h
126 305 m
S
0 i
1 1 1 sc
CM
140 24 m
150 24 l
150 14 l
140 14 l
h
140 24 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -56 329 cm
196 305 m
206 305 l
206 315 l
196 315 l
h
196 305 m
S
0 i
1 1 1 sc
CM
60.497486 24 m
70.49749 24 l
70.49749 14 l
60.497486 14 l
h
60.497486 24 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -56 329 cm
116.49749 305 m
126.49749 305 l
126.49749 315 l
116.49749 315 l
h
116.49749 305 m
S
0 i
1 1 1 sc
CM
51 24 m
61 24 l
61 14 l
51 14 l
h
51 24 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -56 329 cm
107 305 m
117 305 l
117 315 l
107 315 l
h
107 305 m
S
0 i
1 1 1 sc
CM
178 24 m
188 24 l
188 14 l
178 14 l
h
178 24 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -56 329 cm
234 305 m
244 305 l
244 315 l
234 315 l
h
234 305 m
S
0 i
1 1 1 sc
CM
79.49749 24 m
89.49749 24 l
89.49749 14 l
79.49749 14 l
h
79.49749 24 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -56 329 cm
135.49748 305 m
145.49748 305 l
145.49748 315 l
135.49748 315 l
h
135.49748 305 m
S
0 i
1 1 1 sc
CM
168.49748 24 m
178.49748 24 l
178.49748 14 l
168.49748 14 l
h
168.49748 24 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -56 329 cm
224.49748 305 m
234.49748 305 l
234.49748 315 l
224.49748 315 l
h
224.49748 305 m
S
0 i
1 1 1 sc
CM
159 24 m
169 24 l
169 14 l
159 14 l
h
159 24 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -56 329 cm
215 305 m
225 305 l
225 315 l
215 315 l
h
215 305 m
S
0 i
1 1 1 sc
CM
149.49748 24 m
159.49748 24 l
159.49748 14 l
149.49748 14 l
h
149.49748 24 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -56 329 cm
205.49748 305 m
215.49748 305 l
215.49748 315 l
205.49748 315 l
h
205.49748 305 m
S
0 i
1 1 1 sc
CM
99 24 m
113 24 l
113 14 l
99 14 l
h
99 24 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -56 329 cm
155 305 m
169 305 l
169 315 l
155 315 l
h
155 305 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 106 19 cm
/F1.1[ 5 0 0 -5 0 0]sf
-1.39 1.9300003 m
(!)s
/Cs1 SC
1 1 1 sc
CM
207 24 m
221 24 l
221 14 l
207 14 l
h
207 24 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -56 329 cm
263 305 m
277 305 l
277 315 l
263 315 l
h
263 305 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 214 19 cm
-1.39 1.9300003 m
(")s
/Cs1 SC
1 1 1 sc
CM
197 24 m
207 24 l
207 14 l
197 14 l
h
197 24 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -56 329 cm
253 305 m
263 305 l
263 315 l
253 315 l
h
253 305 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 67 31.5 cm
/F1.1[ 8 0 0 -8 0 0]sf
-22 2.8880005 m
(#$%&'\(\)*+%#'*\))[ 4.000000 4.448000 1.776000 2.368000 2.520000 2.224000 2.520000 4.296000 4.592000 1.776000 4.000000 2.520000 4.296000 0.000000 ] xS
1 0 0 -1 22 24 cm
/F1.1[ 16 0 0 -16 0 0]sf
-8 5.776001 m
(,)s
1 0 0 -1 130 24 cm
-8 5.776001 m
(,)s
1 0 0 -1 180 31.5 cm
/F1.1[ 8 0 0 -8 0 0]sf
-22 2.8880005 m
(#$%&'\(\)*+%#'*\))[ 4.000000 4.448000 1.776000 2.368000 2.520000 2.224000 2.520000 4.296000 4.592000 1.776000 4.000000 2.520000 4.296000 0.000000 ] xS
1 0 0 -1 207.88586 73 cm
/F1.1[ 6 0 0 -6 0 0]sf
-5.0009999 2.4160004 m
(-./)[ 3.336000 3.222000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -56 329 cm
202 260 m
159 260 l
159 290.10001 l
S
0 i
CM
103 30.9 m
106 38.900002 l
100 38.900002 l
h
103 30.9 m
f
0 J
0 j
1 0 0 -1 -56 329 cm
159 298.10001 m
162 290.10001 l
156 290.10001 l
h
159 298.10001 m
S
1 J
1 j
0.60000002 i
247.5 260 m
270 260 l
270 290.10001 l
S
0 i
CM
214 30.9 m
217 38.900002 l
211 38.900002 l
h
214 30.9 m
f
0 J
0 j
1 0 0 -1 -56 329 cm
270 298.10001 m
273 290.10001 l
267 290.10001 l
h
270 298.10001 m
S
/Cs2 SC
0 sc
1 0 0 -1 106.3901 73 cm
-4.7249999 2.4160004 m
(#%0)[ 3.000000 1.332000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
158.5 92 m
191 69 l
158.5 46 l
126 69 l
h
158.5 92 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -56 329 cm
214.5 237 m
247 260 l
214.5 283 l
182 260 l
h
214.5 237 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 158.5 69 cm
/F1.1[ 7 0 0 -7 0 0]sf
-17.8265 -1.6559992 m
(\)*1*\(-*2\)345)[ 2.205000 3.759000 4.151000 3.759000 1.946000 3.892000 3.759000 3.892000 2.331000 3.759000 1.554000 0.000000 ] xS
-10.242 6.54 m
(6$/\)/7)[ 3.759000 3.892000 4.018000 2.205000 4.018000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -56 329 cm
215 153 m
215 179.10001 l
S
0 i
CM
159 141.89999 m
162 149.89999 l
156 149.89999 l
h
159 141.89999 m
f
0 J
0 j
1 0 0 -1 -56 329 cm
215 187.10001 m
218 179.10001 l
212 179.10001 l
h
215 187.10001 m
S
/Cs2 SC
0 sc
1 0 0 -1 176.5 100 cm
/F1.1[ 9 0 0 -9 0 0]sf
-13.0005 3.3740005 m
(89::)[ 7.839000 5.166000 6.498000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -56 329 cm
214.50002 218.5 m
214.50002 226.59999 l
S
0 i
CM
158.50002 94.400009 m
161.50002 102.40001 l
155.50002 102.40001 l
h
158.50002 94.400009 m
f
0 J
0 j
1 0 0 -1 -56 329 cm
214.50002 234.59999 m
217.50002 226.59999 l
211.50002 226.59999 l
h
214.50002 234.59999 m
S
/Cs2 SC
0 sc
1 0 0 -1 173 164 cm
-11.502 3.3740005 m
(&\)30*)[ 2.664000 2.997000 4.833000 7.677000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
126 140 m
191 140 l
191 111 l
126 111 l
h
126 140 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -56 329 cm
182 189 m
247 189 l
247 218 l
182 218 l
h
182 189 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 158.5 125.5 cm
/F1.1[ 8 0 0 -8 0 0]sf
-21.184 -2.223999 m
(*;'\)3<./\(1*\()[ 4.296000 4.144000 2.520000 2.664000 4.296000 4.296000 4.296000 4.592000 2.224000 4.744000 4.296000 0.000000 ] xS
-25.996 8 m
(63\)36'*\)=#'%63#)[ 4.296000 4.296000 2.664000 4.296000 4.296000 2.520000 4.296000 2.664000 1.776000 4.000000 2.520000 1.776000 4.296000 4.296000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
