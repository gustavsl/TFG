%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 108.000000 197.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12 (Build 16A320) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 108 197
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 108 197
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /ellipsis put
dup 34 /zero put
dup 35 /one put
dup 36 /s put
dup 37 /h put
dup 38 /i put
dup 39 /f put
dup 40 /t put
dup 41 /space put
dup 42 /r put
dup 43 /e put
dup 44 /g put
dup 45 /p put
dup 46 /n put
dup 47 /c put
dup 48 /d put
dup 49 /o put
dup 50 /uacute put
dup 51 /m put
dup 52 /b put
dup 53 /greater put
dup 54 /equal put
dup 55 /l put
dup 56 /a put
dup 57 /question put
dup 58 /iacute put
dup 59 /atilde put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<




1239B800212FB80020DCB8000110B8003EDC00BA001B002600032BB8001B10BA0007003300032BB8000710BA0029001100032BB8002910303125112315232E0123220E0215141E02333236373315140E0223222E0227231E0333323627222E0235343E0233321E0215140E0201FE5001175231435C38181D3A563A3259160211263A2A152E271B015502283D4B247C74EE2A38220E11253A292838231011243B2C01D94A2B2B334F612E355F472A2D30222B48331D091420172A3A24107E98233946232544341F20354222244839230000010040000001EC02CA001A0051BA001A000000032BB8001A10BA000E000B00032BB8000E10B8001A10B80002D0B8001A10B80018D0B800182F00B800002FB800012FB8000C2FBA0013000800032BB8001310BA001900010000111239303113113311343E0233321615113311342E0223220E02072311405513263927313855112A443317312D240A0202CAFD360124233B2C183830FEA201542A45321C0A1521180111000200450000009A02CA00030007002FBA0001000200032BB8000110B8000210B80004D0B8000110B80006D000B800052FBA0001000000032BB800011030311335231D011133119A5555026268685DFDFB020500000100450000009A02CA00030017BA0003000000032BB800031000B800012FB800002F303113113311455502CAFD3602CA00000000010040000003150211002A00B7BA0003000000032BB8000310B8000DDC4103005F000D00015D4103008F000D00015D41030020000D00015D410300B0000D00015DB80010DCB80018DC4103008F001800015D4103005F001800015D41030020001800015D410300B0001800015DB8001BDCBA0023000D0010111239B8000310B80028D0B800282FBA002900000003111239B8001B10B8002CDC00B800012FB8000E2FB800192FBA0026000800032BB8002610B8000810B80013D0B8002610B80020D0303113113311343E0233321E0215113311343633321E0215113311342E02232206072E01232207233540550F2135251D25160955483F1F27160855192D3F2733551A104E306D3A020205FDFB01420F2D2A1E111F2A19FEAD01423C48121F2A18FEAD017B283924112E2A3028584C00000000010040000001EC021100170045BA0003000000032BB8000310BA000E000B00032BB8000E10B8000310B80015D0B800152FBA00160000000311123900B800012FB8000C2FBA0013000800032BB8001310303113113311343E0233321615113311342E022322072335405513263927313855112A44337335020205FDFB0124233B2C183830FEA201542A45321C5E520000020024FFF5021A02110013002700CBB800282FB800292FB8002810B80014D0B800142FB80000DC411B00060000001600000026000000360000004600000056

0210B80017DCB8000DD0B8000110B80014D000B800012FBA000F000C00032BB8000F10BA0004000500032BB8000410B80000D0B8000510B80015D030311335231523153311141E023B013523222E0235113335B65558580E1D2F21412714190E056702059B9B4BFEB7242C18094B030A120F01414B00000000010040FFF501EC020500180051BA000C000D00032BB8000C10BA0001000200032BB8000110B8000210B80016D0B800162FBA001700020001111239B8000210B80018D0B800182F00B800012FB8000C2FBA0008001300032BB8000810303121112311140E0223222635112311141E0233323637331501EC5513263927313855112A443339541B020205FEDC233B2C183830015EFEAC2A45321B2D3052000000FFFF0024FFF5020A02E20222000700000003001F00A00000FFFF0032000000FF03020222001E00000002001C00000000FFFF0040FFF501EC03020222001800000003001C00AD000000010032026000FF03020003000FB800142B00B800002FB800012F303113072337FF8D40600302A2A20000000003006F00000378006F00030007000B0081BA000B000800032BB8000B10B80004DC410300BF000400015D4103002F000400015D41030070000400015DB80007DCB80000DC4103002F000000015D410300BF000000015D41030070000000015DB80003DCB8000DDC00BA0000000100032BB8000010B80004D0B8000110B80005D0B8000010B80008D0B8000110B80009D0303125153335211533352115333503096FFE446FFE446F6F6F6F6F6F6F6F00000100450000009A020500030017BA0001000000032BB800011000B800022FB800002F30313B011123455555020500000001FFC10269012002E200160043B800142B00B800032FB800122FB800072FB8000E2FB8000710B900000002F4B8001210B80004D0B800042FB8001210B9000C0002F4B8000710B8000FD0B8000F2F303113323637330E0123222E02232207233E0133321E02BD161903310A372714242423122E092F0A332A1426242502AB1D1A4633101410333D3810141000020037FF5B04A802FA000B00110023B800142BBB00060003000300182B00B800042FB800112FBB00090002000000182B3031372226351133111416332115050901370901F75E62622E30034EFEA20136FECA42017FFE8276606101C3FE3D30345DD7010401004BFEB5FEB80001000000010000451BB6635F0F3CF5011103E800000000B643600000000000D34D8599FC49FE1F07C304350000000900020000000000000001000003B8FF2B001C08B1FC49FE8007C300010000000000000000000000000000002101F4003301160000022C002A022C0057025800300258002E022C003602190024025100430219002402510024021900240128000C023E0024022C004000DE0045
00DE004503550040022C0040023E002402510043014D003D01F4001F013B0009022C00400219002400DE0032022C004000DE003203E8006F00DE004500DEFFC104BE003700000048004800F4011A0138015401E202EC038403F6049404FC054805FA064C06760690072A0772081208AA08D8097C09CE0A1E0A2A0A360A420A580AB00AC80B0E0B440001000000210096000900680004000200000000001E00000200042800030001B800142B01BA0002000200162B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 33 dict dup begin
/.notdef 0 def
/space 1 def
/zero 2 def
/one 3 def
/equal 4 def
/greater 5 def
/question 6 def
/a 7 def
/b 8 def
/c 9 def
/d 10 def
/e 11 def
/f 12 def
/g 13 def
/h 14 def
/i 15 def
/l 16 def
/m 17 def
/n 18 def
/o 19 def
/p 20 def
/r 21 def
/s 22 def
/t 23 def
/u 24 def
/atilde 25 def
/iacute 26 def
/uacute 27 def
/acute 28 def
/ellipsis 29 def
/dotlessi 30 def
/tilde 31 def
/uni2B91 32 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec

16B443F6641010151FFD3A578ACC55BCB1EE82359D112480E1B267503284FA89BF04D787FC26A99E596A7D4AF9571B784C2216F1A3E979BC76881CDF6C1D63E0E241BE50672F63409FDE5E46580A8E102A28023ADD815B65AD5F1B94A98EF19FAA90884C3C29D75BCE27DFF19B41765239ADBFFCE0B6183426A53EFDC2462E9465A161059F3EE5453C6EF0737E54230F285DA2D3369C0B5EF89DCC7DC374A17B1C06E1454FC700ACB07DE9CFA875B2F8E5AB6E808A4436D0755AE9846CBF0D7E705C5C9DE2F4A4BE4E6CDC7C620BFFD1610C0742C0BEE4C14ED5FC3651F63D0A6E4BD88A71399AA1850D57A1D4498EA1DCBB430DDD4F7578070C206810D4E2D2908CBA57294D198E1DCCF44543CDB43FF2F722E905BA4D2131E8A9808979DA6C930D94F137ECB4BB8546C6E3A75ABA0DD79E6E9BBC3758D79D592655C11B04B903DF0E27BE784330141516BD66645DDA5D6E9D5A1F3B34F1B5878B1F74C4843B420229BDBB781B2AAA89B45E82EACF17DBF11B3137CC34DBB66A7E5D2ABB26C515BE05CD0B8AC6E09CDBCDDAA32E20B2ECAB2BD29A260F208AFE1018B5EBBA241A16543AFCAB23D237BA009C3D9E3E09FDE7D0602096225F3AF2312A951B5FADECC4C6D98368292C44014294AC8C96E1F8F4536D78B49FA8CD5A47002D05FDE5C8CA763E91B892A28D11DFA8163DAC78865A18430D5FB8394F5008E35994D42858C833A15A7E3F49E65B829318163CD11FDC51138D5A76E8D3780073198366D7E808F8C40CCCEF33AC55FFBDAE74D1708EFF491677FF7F6804B50AB047CA5516B96206D29018D895884372826B2BCBD6F9813980297BA92C7C31235BB78B5E47CEB1C72E4D0BAB005474AFAA475FC9531350B8588CCA4606A5A79303F877C170A015442A92D1137C77F53124C0DC3B29CB7F5E05A1C70489B785681C3BF09F1F27940CCC7AD1B02DCB7CE16D79F686877DC810C8F1368E94471DB5FB176E233E2E140B1565135DBE9106E71F3AF87CE182122D61787CD38DED5074CEA2AB889A32E05694C16D627AC2A97F76CE4420A6C8583F5163919754947709B9F196E84BDAA8BCABFA64716ADB0AD7362862B4F8E9F294B3116BB11B4BADB2A949C8DFEBBEC14C523E42820867226006636F2E0CC8277008A6FABC97D67951E123FB1FE2FDBFF7A5A884F54655CA9C0D3BFA86E7661990CEC614AE1BB06F71977099E7C9E23E66D4AC06B8E532210B2F8A6C8FA7C38E677FD326F3755ECEE001A612EF3B1CA06B032576123796F6EAE5C783D85B813D1E4FF013C8175B1EB488A27B8CEB983AD24964010E203DE640E7315F50952C2B0E1B0BE0F96DA9DE03E8B904B0F1C4D6F92E382E429077F4895C8AF445FFDCBF61FA8C93F0A887C39532626CF9B9E849C6A14BD9AB3A4E3B5C8E34A9B2887801A1F93ABCA22ABE97503BB191D1DD
5ED6521C5666BC40A28A0031CE8B6C79D233B440EDF55BBB76C8EC0FBCCE21B06C4FE62DEA3121BE6737E348F4DEE89E7119A034264F03427D64783D3D9033FB4AB5BDD7FC03F099D4ADDA19C785C88F2F0F5B99D08CB03269FEBE7BE97540974C6261280452A53550A1F68FF2843B495EDDCEB409A449A7ABF8BF25710967329A60B5DDE5AED65DEF41200524E4435D73CF25C9B4C50753E6625BFB32A0CF8BC2229D867A083863DEBE2487517048D195C3B1AC3A4F4545238DB4C9F57D2C29EAA5E90A15A17A0EC7C847C666561D114DC462388FAC74C73B358CB1D60A2F14FE3DAA0A1D7126A816799D1198B3D9A197823B65DBAF8CBDE9660CB51A5EE48481D002CF7AC799B52B1ACA32FBCA7D24ABB633BCC178515B77807130F7F93D5DAAB5290273BF39C68AF512E70860B6AD3AEACF30D9426A440720BE60A8048BBEC4C61C2E0CDACB3F4C7864CA1EB58C5349B2CEF2920D89DEF58AFE079BD98177E34F81ED3588D83E8A9637CB49DA0E9B72AE17713CC2162034971E28D8DF13D1368A3F4638184E133DF36CBA6F88920C3629EF4E96C51C53666C82FC39AF088EAF30DA1C2A70EB3FDB019CD1BFFD338ECB4D685B2A175D7713A16CDF963EA8DA04080AA61DD40F7C87166FA035EA635BCF397D661D3320251E48C2A9455B4A0FD87C0586AD5D46A0D242B41AB4802E5510D5F9CECA31FB6870A053262EA7DF46634AE910ABB09587DDE985DD6B19CFB9788F5C4E43B4CE6EFDA73EEBE2344DC80BC17DF8AA46F37CEE2C0353CAA31756DB9626BA27DE7B42205D82CD776BDE26E80CF80B6669C42B01C76261D539FB84A5D5203BB53D152D00947266CCB9DAECE711E4F0BCBC03EE277BAC35009AACC6434EEE22A75B7FFD50CA031BB91981EE3BC9FF05B9994E2AF5BCDC5F2363CB995E656ECCDAC7C0C37655AE43470D04A60D85DB56F893CEC4955E421024D4C321A0D39AE4CBD6E213AC00697CB9BBD3AD799C6A1801B96A715ECF54C2E61F9375FEA296DC57192CEC7E6A6CC219F43186110A7634FAFDACAE3C00A5D2467CA01391E0D08FD1C4EFECFBBCF29AD3D85FD0BC9A0AC27A001CF03E799B3AC9352227B979EBD82C3FBDC08A129F8A4156050B6F188F98FF88E433B9315DFD36790DD4E6489A7822A7E4AF4DC9D2AEB0A2D249F8816B28FD50FA5B5C577307CF4B93B7643B16453A47E249D353FA8C0108AF67BA1E649F97A222EB125AE386DF1B293EB84F86674A56285EF00C193586F4E29B7824F910A3D74685CC98D1C63CF7F8512175568EEF6308BF5CD7F81040F781CF33C6E3B9C3E1D09169052F77B5C43D7E37C6EBF5D608A2EC009AE20F74006533BF0B4AE02BA40A6C47960C64A0186991FB3507316128BB3BAB5415F1FCA197B3CDE212D2C79A4A78F69DAD7783C56351960414847A751E14142A03F13AA2A50E

BA8FD87A9983A91BD2E05588EC12DD5C3414128EBC5EDA26C43EDDEB89818AC076F33ABFE6850C670BDE07436BA2626291021ABF0D0FDD9602E3BA77A23984E2A80BC8923F7C879CE38511A90CBC08227CFB2E90964FC337808E6004838032A186BAA5FE978F5B4D5123ADCCC750A9D9DABB6B996B1B9464496B2F90C2B226557EC6836513F1835C65A6BE0D4AABCD763671B5E7B8689F53C396ECA6CE8C5660674688C20E819CC2EC459DBD7CE19618CA08367029DCFEF52510B28169B933D41B63D04E2FABCE860F5072E192F50932BADDFE1B7CD4C7EEB52898B542F3B61880F21E1AB51C1EC7C510D0126CEE1AC9D79A8CAA7DE759F943AFB3AD19DDEF619EAA9DEB8465F521F34D87FCD4E14E4DCC72151BC60B59EAC0547E9A31DABD683C9668F8287D3F1B1B8BC9CA8B0C002B046CB219E9032D1E697E63A84E2D2E3F39825FDD3BD9E1104B4F7C44285642908E02CADFDAAE2F38AFC32C937997219F66DE6FCD76C1C09C595704E0EC3C7514226CF1D73905D520DCF3833689FD7ACF0044FD57C34E86E78B11CAC681A860842A998F789D711C2DD756B84CECB54145825701AC340827809DF361F8346EA7077C0FB0E568596E8D991AA2D885BDCDAAF4510AE9E8A4350524B419324BF629410DC413828DEA49076380631B66ACC675EA4DB4EAC0AC57C8E13C7EF16BADB082BF6C014888BF53E7D7CF2101479ED2980C609D54AD583BCB384455BBFA74024A85B5ACE73FD438AEDA80AE447F3677BF1099E1CEBBB3B8704E4084A9C183FD7BD969348AB98AB3255A1482AB1D20D8ACA495A7F9787DE346349DD18014FD7607FEB9CF061100ED66674E100450A438011DAB114DD556A77CE782406B0ECC7582013D96D13DEDBBC79DB93E5F265FCBFFE595C361764895C61473FBB75F24D34133B1A056927F1BB22C1EF36BC592069C29F13C845B26D03588F6060083A791596A5C2D80F73C20F1BAFB2E528107E6A6773504CF2F2205118CB2B9463109D7E5A63F9EFD03C4948146F473CCC84C2536A686F3A8B99BA5874B889359588692AADC4826679DBEFB82840E3697F5398949F9A9A8A29AAAD4C8E0C07E48957E92426D2B7C14BC62CFFA6BF508EFBA99FBC08B98BE51A1EB968631BEFAF62B213A5B588877D830CB61C64F9E5A6744D4BFD63BBA4464B0FC1655C6268847FAE42D7A722B7D363B6773DB4CAEA9AD8DCDF0C188CF55030C0F6534ED180C4DFB8F7BEC54EE996323150415962B0C613969266273B98A93850B4846E02EF425CFA479D7CBB34D7F633CF26294241F3C271A04F5BEF33BEE1E886D1E59E28EA46340D5BAE7F286849A6B4C24C7B50ACFEE5242925095C73DA79492BC899D0775591D220E25FC6317316D623B82E8623383027C05E09B36043C8A0CBAE268D40AD5561D5B8CD7B1007265B500180E1F7D0EF10A5E
AED9F931F4CA3FAF55D64C7186BB67781D94FE537019EB139B32661096994C4C5AB383DCEC6652786FDD6485552A659C832002F47C50185DA9A9736761E6DB7BAE06F595E532D6FC53E133FFC39E4AE71A9B023ACECA7C5163476194B8BD505C16FE430EA328B8F1AA5FB1E6AC871BF6BD5DCC6192260561AA46375FDD49D5A3B0E777720061F68590B7F111152678B5F8702D31012E897F387390F9C4CDFC2A53344488F89577D933CB7126EEB61BB6100126D4A71341BE92993E40A8BB930A8833398A0A88E0F8816A18073BC0661EE8BE5470922F9C7F87934DED849819D5AD4BF9EB8BF50D95AA243EEEEB9B0B1250D3B517D71A13C5E8AF93E15FE0B9BBFCD498C26845D079FD91E0579D8C49008B01E0798C4504A40315F05F1CBEF6689E3F4805356350CD210B47BD67CCE4477B75EB176B38F0EE9A599A49065C881907D33851447EF5EF51334D8CA16AD3DC09036937F080F6C19A7A51BF883C12FF260A2BE297A4FBA19F5D644219A4EF2072B2FD705D9C965034B9735D545178607B16B97215B12F732BD9CEABC9E2A629611ED3C5B329F62981470830F0BFFB90FE9855204272B63B9647E4A923D69264C4166CD77F2A3D46B8A22B1E09416811490607A032F6C0AF0A6A783C158234B730F582298517DB4ADA3A77F632E4E4F6F0CB7B7BBB78ADF31082AB1E0DDC8F303FE3A8FEE819CD701C757D59B7412621F222B84DD7529B26FE54A035DF774D41547697109DC162DF2ECCBF5A8EC4D47DDB81CA3ECDAAC90E2E1A0E09D9EF1F69EDFF9A0C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0 sc
q
0 0 108 197 rc
1 0 0 -1 13 180 cm
/F1.1[ 16 0 0 -16 0 0]sf
-8 5.776001 m
(!)s
/Cs2 SC
1 1 1 sc
CM
26 182 m
40 182 l
40 172 l
26 172 l
h
26 182 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -159 543 cm
185 361 m
199 361 l
199 371 l
185 371 l
h
185 361 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 33 177 cm
/F1.1[ 5 0 0 -5 0 0]sf
-1.39 1.9300003 m
(")s
/Cs2 SC
1 1 1 sc
CM
36 182 m
50 182 l
50 172 l
36 172 l
h
36 182 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -159 543 cm
195 361 m
209 361 l
209 371 l
195 371 l
h
195 361 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 43 177 cm
-1.39 1.9300003 m
(#)s
/Cs2 SC
1 1 1 sc
CM
45 182 m
59 182 l
59 172 l
45 172 l
h
45 182 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -159 543 cm
204 361 m
218 361 l
218 371 l
204 371 l
h
204 361 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 52 177 cm
-1.39 1.9300003 m
(")s
/Cs2 SC
1 1 1 sc
CM
55 182 m
69 182 l
69 172 l
55 172 l
h
55 182 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -159 543 cm
214 361 m
228 361 l
228 371 l
214 371 l
h
214 361 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 62 177 cm
-1.39 1.9300003 m
(#)s
/Cs2 SC
1 1 1 sc
CM
64 182 m
78 182 l
78 172 l
64 172 l
h
64 182 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -159 543 cm
223 361 m
237 361 l
237 371 l
223 371 l
h
223 361 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 71 177 cm
-1.39 1.9300003 m
(#)s
/Cs2 SC
1 1 1 sc
CM
73 182 m
87 182 l
87 172 l
73 172 l
h
73 182 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -159 543 cm
232 361 m
246 361 l
246 371 l
232 371 l
h
232 361 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 80 177 cm
-1.39 1.9300003 m
(#)s
/Cs2 SC
1 1 1 sc
CM
83 182 m
97 182 l
97 172 l
83 172 l
h
83 182 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -159 543 cm
242 361 m
256 361 l
256 371 l
242 371 l
h
242 361 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 90 177 cm
-1.39 1.9300003 m
(")s
/Cs2 SC
1 1 1 sc
CM
93 182 m
107 182 l
107 172 l
93 172 l
h
93 182 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -159 543 cm
252 361 m
266 361 l
266 371 l
252 371 l
h
252 361 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 100 177 cm
-1.39 1.9300003 m
(#)s
1 0 0 -1 65 188.5 cm
-27 1.9300003 m
($%&'\(\)*+,&$\(+*\)-*++./%&01)[ 2.500000 2.780000 1.110000 1.480000 1.575000 1.390000 1.575000 2.685000 2.870000 1.110000 2.500000 1.575000 2.685000 1.665000 1.390000 2.965000 1.575000 2.685000 2.685000 2.780000 2.685000 2.780000 1.110000 2.965000 0.000000 ] xS
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -159 543 cm
228 373 m
227.71643 412.70001 l
S
0 i
CM
68.659286 122.30019 m
71.716354 130.27855 l
65.716507 130.32141 l
h
68.659286 122.30019 m
f
0 J
0 j
1 0 0 -1 -159 543 cm
227.65929 420.6998 m
230.71635 412.72144 l
224.71651 412.67859 l
h
227.65929 420.6998 m
S
1 1 1 sc
CM
68.5 120 m
97 100 l
68.5 80 l
40 100 l
h
68.5 120 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -159 543 cm
227.5 423 m
256 443 l
227.5 463 l
199 443 l
h
227.5 423 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 68.5 100 cm
/F1.1[ 4 0 0 -4 0 0]sf
-14.512 -1.5119995 m
(.23+*1\)0+\)4&\($\)#\))[ 2.224000 2.224000 3.412000 2.148000 1.260000 2.296000 1.112000 2.372000 2.148000 1.112000 2.372000 0.888000 1.260000 2.000000 1.112000 2.224000 0.000000 ] xS
-8.276 3.5999999 m
(56\)7&3&8*9)[ 2.400000 2.400000 1.112000 0.888000 0.888000 3.412000 0.888000 2.148000 1.332000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
13 65 m
39 65 l
43.418278 65 47 61.418278 47 57 c
47 48 l
47 43.581722 43.418278 40 39 40 c
13 40 l
8.5817223 40 5 43.581722 5 48 c
5 57 l
5 61.418278 8.5817223 65 13 65 c
h
13 65 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -159 543 cm
172 478 m
198 478 l
202.41827 478 206 481.58173 206 486 c
206 495 l
206 499.41827 202.41827 503 198 503 c
172 503 l
167.58173 503 164 499.41827 164 495 c
164 486 l
164 481.58173 167.58173 478 172 478 c
h
172 478 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 26 52.5 cm
/F1.1[ 11 0 0 -11 0 0]sf
-13.6455 3.8460007 m
(87+*\(8)[ 5.907000 2.442000 5.907000 3.663000 3.465000 0.000000 ] xS
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -159 543 cm
198.5118 442.99158 m
193.00441 442.98999 l
185 443 l
185 467.60001 l
S
0 i
CM
26 67.400002 m
29 75.400002 l
23 75.400002 l
h
26 67.400002 m
f
0 J
0 j
1 0 0 -1 -159 543 cm
185 475.60001 m
188 467.60001 l
182 467.60001 l
h
185 475.60001 m
S
/Cs1 SC
0 sc
1 0 0 -1 31.795197 104.00726 cm
/F1.1[ 6 0 0 -6 0 0]sf
-4.7249999 2.4160004 m
($&3)[ 3.000000 1.332000 0.000000 ] xS
/Cs2 SC
1 1 1 sc
CM
45 26 m
93 26 l
97.418282 26 101 22.418278 101 18 c
101 9 l
101 4.5817218 97.418282 1 93 1 c
45 1 l
40.581722 1 37 4.5817218 37 9 c
37 18 l
37 22.418278 40.581722 26 45 26 c
h
45 26 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -159 543 cm
204 517 m
252 517 l
256.41827 517 260 520.58173 260 525 c
260 534 l
260 538.41827 256.41827 542 252 542 c
204 542 l
199.58173 542 196 538.41827 196 534 c
196 525 l
196 520.58173 199.58173 517 204 517 c
h
204 517 m
S
/Cs1 SC
0 sc
0 i
1 0 0 -1 69 13.5 cm
/F1.1[ 7 0 0 -7 0 0]sf
-25.147499 -1.1959991 m
(*+\(1*.8\)81\)&.:/&1\))[ 2.205000 3.759000 2.205000 4.018000 2.457000 3.892000 3.759000 1.946000 3.759000 4.018000 1.946000 1.554000 3.892000 1.554000 3.759000 1.554000 4.018000 0.000000 ] xS
-20.1635 7 m
(01\)-*1,*838)[ 4.151000 4.018000 1.946000 4.151000 2.205000 4.018000 4.018000 2.331000 3.759000 5.971000 0.000000 ] xS
0.60000002 i
/Cs2 SC
0 0 0 sc
1 0 0 -1 -159 543 cm
179 503 m
179 530 l
185.60054 529.93262 l
S
0 i
CM
34.600124 13.148981 m
26.569931 16.067196 l
26.631151 10.067509 l
h
34.600124 13.148981 m
f
0 J
0 j
1 0 0 -1 -159 543 cm
193.60013 529.85101 m
185.56993 526.9328 l
185.63115 532.9325 l
h
193.60013 529.85101 m
S
1 J
1 j
0.60000002 i
227.62384 463.41522 m
227.8858 506.60019 l
S
0 i
CM
68.934326 28.399961 m
71.885742 36.418011 l
65.885849 36.381615 l
h
68.934326 28.399961 m
f
0 J
0 j
1 0 0 -1 -159 543 cm
227.93433 514.60004 m
230.88574 506.582 l
224.88585 506.61838 l
h
227.93433 514.60004 m
S
/Cs1 SC
0 sc
1 0 0 -1 75.755768 57.856365 cm
/F1.1[ 6 0 0 -6 0 0]sf
-5.0009999 2.4160004 m
(.;1)[ 3.336000 3.222000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
