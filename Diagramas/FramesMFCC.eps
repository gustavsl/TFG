%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 203.000000 222.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12 (Build 16A320) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 203 222
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 203 222
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /v put
dup 34 /e put
dup 35 /t put
dup 36 /o put
dup 37 /r put
dup 38 /space put
dup 39 /d put
dup 40 /l put
dup 41 /i put
dup 42 /u put
dup 43 /a put
dup 44 /s put
dup 45 /A put
dup 46 /D put
dup 47 /C put
dup 48 /f put
dup 49 /m put
dup 50 /two put
dup 51 /five put
dup 52 /six put
dup 53 /c put
dup 54 /p put
dup 55 /ccedilla put
dup 56 /atilde put
dup 57 /four put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<







047E04F0058E05F60642066C0686072007C008580886092A097C09CC09EC09F80AA60AEC0B22000000010000001C0096000900680004000200000000001E00000200042800030001B800142B01BA0002000200162B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 28 dict dup begin
/.notdef 0 def
/space 1 def
/two 2 def
/four 3 def
/five 4 def
/six 5 def
/A 6 def
/C 7 def
/D 8 def
/a 9 def
/c 10 def
/d 11 def
/e 12 def
/f 13 def
/i 14 def
/l 15 def
/m 16 def
/o 17 def
/p 18 def
/r 19 def
/s 20 def
/t 21 def
/u 22 def
/v 23 def
/atilde 24 def
/ccedilla 25 def
/tilde 26 def
/uni2B91 27 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec

B4BADB02F6232C5D9E44C850AA33F10A15C3E05AC12553B7607613E657AE76231B5A066FF0230D0444E8D39ADE6B08351D9DC48DB6EA5471304DDDC18CD27087773102A213D6A5A4E620A6CBBF82CDA89E9A63884C6F4BC40763ECA71A9A2A24E4BE83C495E13A9C8CF836D8C0BA17D391FAA825770458B8BA489A5C1C96FB8E4AE787F80C06D503D8AE34DEE7618C4B03CB984C8E2FA1A75CC8E1A4375221519533E7529A2362ACAF92017B89BBE35120088B255FD7F0BD1022C5B6735EACF15ED56863D387A9153F63ED4D798522C921413ECBEF75903D90AB7E0B457FB2AE6A17590D55974CA75F73DB0F996EB9EA78A2657209C482BF0F71AC9EFA0D5DABDAF4EEB224252096050D9F115856D794AB75FB2CC0566FC81E89E7F1DF4E482DAD215965B486412E16D94A8E17FAABEB9C58CAE1779C089B9D4D70953888449F96960B54591E76F48BD90662F2C84B94A9371B1298E014D25DEBDEF46958CD123CB3288F5F4B2E114E51B82762AB65A994CC3F00158FC55F4CBD5C50C71BDD3E9CEEFB0BF8D882DAA7919AF10938E4D312FC3629EC6A9DD1E4A9C8E0CBFDA6817D8F2852811954646E7D6A703E0A3AEB4FC95BBD82BA878AF4F382AF7691614DFB13441D8D7598BCE6B7FDCA46A32E685343C4609C5A22032672D5F244B5FE79F4970C30D0F1C7B51360C0977FA070B95566D2E34CBC676FF654F70C8ED6A6C3599A422C8F0575CCE7ED7BE3E40C542DF51EF583812A97B445B60701B5341D379BB50944BFC84013BC46B9C8639B5A3A6D92DAD0D0E0681B935A53B1123EE02B99589C9F809A1925E99B9B9D306A617D8B2D2183327522D3ECE9CDD090D4EFE3AF95BE36797F62196C35A9BF96D740346DA9905872AAF8DD9B304EBF50B9DA79DF4DFE2CA9D548086A39F51E682F0467CF99118CEB1F4AB326D4E14FFD046A898BA81FE306395465AB5B93F6424FF3454C6E838DBDCFA742375B4A3C6A250E5B184F51E47512ABB8E3372F3ED353E7976655F31199E7B65F52AAA1E88D93E950AC10207F3B6A253C96955DE60CB407DE1A604B51CD0F9B31FBE05C02E74A01307CC66F7EC5D0FE828AF6276B0BFC654EC40083AAE927B0B49ABFE9E9F6D961F4641B0CC34B3A9E195E7CA46B4DF1FD0CFF932049C1885DDF6224A6A58377A6E12172FFC68996B5A0868D0DAD652290EF6932AD32AAB12302D98C5549C96BF13220BB992AFBD08BB43D3FAAB5D84BF1150F67A834EBABA128A7EC1FF3A3FA94FE9D2CD4A11EBA3EA37E8964BDF2FF28792D91C486EAE8520F058253488277AB5874A53912BBA5ECBFA7ABA78980A70F59FE868DDBB945FF831213DFAF2D98A8CBBD93F58C4C14E9378F06B71D5D615AB5086C257CD3FA2BD42829E7A7284D6EA3F09D8E8C412461A5A3498B0CD93D6443ECE76E9DC987321DFF3B4E780F5E2B33
5B9EED1FC227ABDBBFB3AB9680A9AC4AA984A4D3E37722F15DE6D04A7A94AECCF2D0DFA21C041C16350920F6BAD7D11FFEA25C7FD2682D88AC8C05543D485D89576186B47748370DA36982CE0851D666A339AFA594B79A6919F5C5CD3ACFDA865F4C8DF3F22A719B923ACFCB7CF5DA83E8F7300A7CF2410A38C38680B7A2766069BEEB2DA5A6B39E047E30B56E73430DDE6A4F3B2A5F8AA3D80084923A84BD825F43BD6A1EF25F0B435AC87DA5889E87F92D5B0658DBC5D34A69484E9B5E69BD8D039E249CAB2AD04AC376AA63B8A4DACFDDF7EFC4F460C481DA873767683ABCAF7AFDDF027BC18F32F9C2A9D2120D211958C38B149035B1C2BE0A5E56B1514A708E65EB2108C8A5BA7BF7A95B458DD31D84015B182F704DE35D062586881C8063B1BAF4B0CF4C6FA8042FBA80BFF71C327F581A0960FEC68E08FBA4103C55F130696EF52721756474583693882C13A33029E8C9BB9BF4E59A692DC4A531D5B980BD0ABAB702CC1AF77B72FB3BD06B91CEDFFB8622C730774CC5CB34B3C38CC7D1FC6226E32BCB6AFB28CD44EF4B9CD5D3B745D5F86A5F876E1D939C8EB74151BFC5BD735F2CD783B43D6C90CFFCB429C388A6743B65560895AEE4C56DE33C7B7A8DFB71D2870037E0E6A78C7685E2D58EA5AC1948628D75E75654B984A5A2F3501F4AA5BE0A8EDE76BFD51949FAA334788CA6E265AC289E477579C184B4EDC4BA39D174243D15CD4B92AE98EF581CC40A0694EDBB30C37D04781960F6FEEC49F7E2F23DB4B95558EA477207ED932E80239B500FC94229AB11EB0BE9DE2938E96C3BE24D2C7E11B4899005E808AF8891FEE164429A2B549EB7E859A5F90CB6A71D5AE91E7A5D2DB859257753D674C34402BC65697D4C7215DCE89D3B59A3BDE60F6F25EA1C71C512E2C028E45F4AF43069CB096B7A105B541CE9676DE33823FE51D56F9178546D640F93FA3F79B31A23D5D6A02882E4C27397CDB54CD6BF255C7D8613425C36412A591A6794F51443B54E6B82C45BD44CA752B9F30FCEE0568CFE695C67CE7981598891EC0A362F1A93C3D97CD2BE1085C3CFBB4C54C36ED894FF4525274A9112F8CBB8AD90333DFEADA78F6FCC45E7ADE92A7E28DEBD00A44A5666AF8F130FB3D12BCCDABCC35F90CBFFD01AE3FC5F38B2F87C8D822E7397A661A47B9BB1F2C4FEC73BA0500F9A1EE6A6D0C6FB4C30861920ED020AC554BEA0273B6616DDE45F88AE748ADCEE8CF9D85D08785535DB0E803D720F958ABC290E45A8CFD770C2997907D44488074A180F501672D174EF3597A3D013D66BD1EB1A7EB666B7DDA0056585F1E2CBD05E7F086C9A30890C2055F2CF906B1A7FBDA86CEA47C0D8479CDE867BD7FC0554B953D1114CF01510BE008675104789ED51A678822F5402122204B89FBB130A7D64268A04E6EF9FB74F3FE0A66ED8999DD8705D

26C2B833593FB871C62CFC67E3377A77FF07A2885935CA1DEEEE96FEE2AAE9B701FD160573E62F5B66B72E539CD6F809B7EF54D1AE0D977A0A38CB23B6F908E22CE3EA04B940345B9BA1168C34EABD57A658DA6FC203A3F9486F02716CBEA1280F6459C4DDE327CF5ED23130DB4065241BBE08C16F28A567E4D34FFB06F88B49752639F74BE4CECAACC36366F14CE0EE2E51BE5CAEF48DF150006CC08411F40815C080749BC4F01EEADFFCF8B0D73BCF710A5E0ACDB98028B70DD6500209569B243A5EF9527DF28AE1FD63CBE8345C69F7AEBEA3629C8941677033A08BF0643D5F3D37007CEC06B1DA85FB8CD6279055417A3CB34BAF70E069E0517530016D4E2A5E4CF504A28B5689F167B74602ECCC8F5330EB37F74BA84BD1EECDEC9EFADE3CFC9244CD1EF356DCD5A22E99AE36E50014C319F97AB8C5DD53813EB66EEF97F943E466FAE3B3DEBC0533B970279C0FDC48F19A3931EA8756A8CDBF2A57EB0208ACE645548BC0F8D4DC3379A6E63CCC03ECA87F4FC6EB2D47D86560F538330537F179D2359818BF9215CB0C25876EFF1BFC5DB56328EDE4BE2D084A38869BC55FFDAE8B8C8563EC9C76A6137C7D732595A5B33B470B479361C753534272645BCF7427C7A1FCCC64B84A2D2935484F8DF4AAC02A8A8483E0E38A04879183F9A4CDBAA2FA8B5BB5B07F69973A63080F6F6198661F4C6C2953322AD3C0E72C987C74BDB4C4AF4A32039DC2B46222D66B39E99725DE811ABCB2DB546EB831AEB70A1D4A8A32A28A5B045EA7A91910A7B12178F8536E8817AC1803C0769D051FCFAED070ED6A06E35EBF0FF1BB8408A0D95C176060B64E8E7E3C3908DC47C9E58E2B789D7729C43B7CCE14864DB5CCDAD46EAF212D31BB355992CC5DBE9A601EF6DB2E4B6246C5A1A93EC68053CD3D85290B70F7CB3E115864BED7C26F63FDB8780464E414C1F208E04540EC8490B1094A78BBA428D0FDDDCF3159C815F127EAA07F3885206161D512715929EF45E1C0AFFE629E85EC631CF409B2EC2A214E8524A0832BF7F71700791559F1A91E8749BF5F3A8E1074A5DE1C7F54BFD7EDF2577A53B7DB7FDFF00606AAD0BE110F0B1639A6826EA44F7B4690F909B427FCD63B93A6288E783DEB7D891A9412B2AEC4A5C3C4236A325C024A2488F959B1D0A180698F7C1E916B8C1B3E71DDE510050BCC18BCEFE29D6D6F6E5BD328A11DA5F27A3AC7D78835EB32C66DEAE585372E05DEF09BCE802AF2BAC7C7984DFC43F21FC25D8D9756A7C074F44B18401D25638563E50D760CD8A582D57A46A9932E7C0B16EFA0DF88F0B6CBF2CEB24F49AB3705925B6153C43C86806CBC08D44F664772A32E1A4327DD6FE8EE42728EC43A52C7BDCE74270E7C9565D22433DB798214938D7F950854DF8559A79C4E37E270AE8FC12D0FF4C4D26C4E355003DF98C231DFB9D27E
DF0C42A3D3BDBFD6DFA750789392082AC2CE92C5CB62B7BE999AFE9AD8F25715D590DF40E75435E22B77304680055507A656C7BCA20610F797D478AA4B6787E6D97C53ACF895C3F43F739748EA7EECBC49E149C205AB75D41C4F389C5EA0B651B97E1AC24AD6928033211BC53C07FE6299D4933DD85DDF84F6BCA48822DE820CEE6BCAE4B78755A75AA9005C837FD126470C89D0E3B7E5E1D80B047A670BECC1D23E04CBB8D85660F9FE1DE53BB36F021C3A0C8448AA79C5D7FC5E40FB099865EECD48557F2A1ECDC7FD54FAC7303C0A941CF41B8DC4B7425CBF57CC0AC2C199D7ECC9288EB099D1835D284C1C5D6E4927FE0659DBA67B594E46E718C04AB5FA67B1C23E499CA1B4E7920A31A8DF4F3CED5CACA81A13931556D576A28489A68C7B9D79942A9C4A98DB4A717FD4339E5DDCFA2979E93D983F089DFE65A247E41924F70D08750565C64867B34ECEB64A6B763B0377D9A9503529CFEAF14F756CF7AC714A2FD808D3720641FEADEC4DE5449E8824C3F23355D95FF8211183E48B56331CF63BE7FD1043937FF9DC67E92760D11C93E665E0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 203 222 rc
151.40158 125.48819 m
165.5748 125.48819 l
165.5748 114.1496 l
151.40158 114.1496 l
h
151.40158 125.48819 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 4 511 cm
147.40158 385.51181 m
161.5748 385.51181 l
161.5748 396.8504 l
147.40158 396.8504 l
h
147.40158 385.51181 m
S
0 i
1 1 1 sc
CM
151.40158 148.16536 m
165.5748 148.16536 l
165.5748 136.82677 l
151.40158 136.82677 l
h
151.40158 148.16536 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 4 511 cm
147.40158 362.83466 m
161.5748 362.83466 l
161.5748 374.17322 l
147.40158 374.17322 l
h
147.40158 362.83466 m
S
0 i
1 1 1 sc
CM
151.40158 159.50394 m
165.5748 159.50394 l
165.5748 148.16536 l
151.40158 148.16536 l
h
151.40158 159.50394 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 4 511 cm
147.40158 351.49606 m
161.5748 351.49606 l
161.5748 362.83466 l
147.40158 362.83466 l
h
147.40158 351.49606 m
S
0 i
1 1 1 sc
CM
151.40158 136.82677 m
165.5748 136.82677 l
165.5748 125.48819 l
151.40158 125.48819 l
h
151.40158 136.82677 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 4 511 cm
147.40158 374.17322 m
161.5748 374.17322 l
161.5748 385.51181 l
147.40158 385.51181 l
h
147.40158 374.17322 m
S
0 i
1 1 1 sc
CM
137.22835 151 m
151.40158 151 l
151.40158 139.66142 l
137.22835 139.66142 l
h
137.22835 151 m
f
0.60000002 i
0.69411767 0 0.10980392 sc
1 0 0 -1 4 511 cm
133.22835 360 m
147.40158 360 l
147.40158 371.33859 l
133.22835 371.33859 l
h
133.22835 360 m
S
0 i
1 1 1 sc
CM
137.22835 162.33858 m
151.40158 162.33858 l
151.40158 151 l
137.22835 151 l
h
137.22835 162.33858 m
f
0.60000002 i
0.69411767 0 0.10980392 sc
1 0 0 -1 4 511 cm
133.22835 348.66141 m
147.40158 348.66141 l
147.40158 360 l
133.22835 360 l
h
133.22835 348.66141 m
S
0 i
1 1 1 sc
CM
137.22835 173.67717 m
151.40158 173.67717 l
151.40158 162.33858 l
137.22835 162.33858 l
h
137.22835 173.67717 m
f
0.60000002 i
0.69411767 0 0.10980392 sc
1 0 0 -1 4 511 cm
133.22835 337.32285 m
147.40158 337.32285 l
147.40158 348.66141 l
133.22835 348.66141 l
h
133.22835 337.32285 m
S
0 i
1 1 1 sc
CM
137.22835 185.01575 m
151.40158 185.01575 l
151.40158 173.67717 l
137.22835 173.67717 l
h
137.22835 185.01575 m
f
0.60000002 i
0.69411767 0 0.10980392 sc
1 0 0 -1 4 511 cm
133.22835 325.98425 m
147.40158 325.98425 l
147.40158 337.32285 l
133.22835 337.32285 l
h
133.22835 325.98425 m
S
0 i
1 1 1 sc
CM
123.05511 176.51181 m
137.22835 176.51181 l
137.22835 165.17323 l
123.05511 165.17323 l
h
123.05511 176.51181 m
f
0.60000002 i
0 0.36078432 0.36470589 sc
1 0 0 -1 4 511 cm
119.05511 334.48819 m
133.22835 334.48819 l
133.22835 345.82678 l
119.05511 345.82678 l
h
119.05511 334.48819 m
S
0 i
1 1 1 sc
CM
55.023621 51.787403 m
69.196854 51.787403 l
69.196854 40.448822 l
55.023621 40.448822 l
h
55.023621 51.787403 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 4 511 cm
51.023621 459.21259 m
65.196854 459.21259 l
65.196854 470.55118 l
51.023621 470.55118 l
h
51.023621 459.21259 m
S
0 i
1 1 1 sc
CM
123.05511 187.8504 m
137.22835 187.8504 l
137.22835 176.51181 l
123.05511 176.51181 l
h
123.05511 187.8504 m
f
0.60000002 i
0 0.36078432 0.36470589 sc
1 0 0 -1 4 511 cm
119.05511 323.1496 m
133.22835 323.1496 l
133.22835 334.48819 l
119.05511 334.48819 l
h
119.05511 323.1496 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 64.169289 20.944885 cm
/F1.1[ 9 0 0 -9 0 0]sf
-49.5 3.3740005 m
(!"#$%&'"&\("\)#*%+,&'$&-./)[ 4.500000 4.833000 2.835000 5.166000 2.997000 2.502000 5.337000 4.833000 2.502000 1.998000 4.833000 1.998000 2.835000 5.004000 2.997000 4.833000 4.500000 2.502000 5.337000 5.166000 2.502000 5.832000 6.336000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
123.05511 199.18898 m
137.22835 199.18898 l
137.22835 187.8504 l
123.05511 187.8504 l
h
123.05511 199.18898 m
f
0.60000002 i
0 0.36078432 0.36470589 sc
1 0 0 -1 4 511 cm
119.05511 311.81104 m
133.22835 311.81104 l
133.22835 323.1496 l
119.05511 323.1496 l
h
119.05511 311.81104 m
S
0 i
1 1 1 sc
CM
123.05511 210.52756 m
137.22835 210.52756 l
137.22835 199.18898 l
123.05511 199.18898 l
h
123.05511 210.52756 m
f
0.60000002 i
0 0.36078432 0.36470589 sc
1 0 0 -1 4 511 cm
119.05511 300.47244 m
133.22835 300.47244 l
133.22835 311.81104 l
119.05511 311.81104 l
h
119.05511 300.47244 m
S
0 i
1 1 1 sc
CM
55.023621 40.448822 m
69.196854 40.448822 l
69.196854 29.110239 l
55.023621 29.110239 l
h
55.023621 40.448822 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 4 511 cm
51.023621 470.55118 m
65.196854 470.55118 l
65.196854 481.88977 l
51.023621 481.88977 l
h
51.023621 470.55118 m
S
0 i
1 1 1 sc
CM
55.023621 63.125988 m
69.196854 63.125988 l
69.196854 51.787403 l
55.023621 51.787403 l
h
55.023621 63.125988 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 4 511 cm
51.023621 447.87402 m
65.196854 447.87402 l
65.196854 459.21259 l
51.023621 459.21259 l
h
51.023621 447.87402 m
S
0 i
1 1 1 sc
CM
55.023621 74.464569 m
69.196854 74.464569 l
69.196854 63.125988 l
55.023621 63.125988 l
h
55.023621 74.464569 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 4 511 cm
51.023621 436.53543 m
65.196854 436.53543 l
65.196854 447.87402 l
51.023621 447.87402 l
h
51.023621 436.53543 m
S
0 i
1 1 1 sc
CM
55.023621 85.803154 m
69.196854 85.803154 l
69.196854 74.464569 l
55.023621 74.464569 l
h
55.023621 85.803154 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 4 511 cm
51.023621 425.19684 m
65.196854 425.19684 l
65.196854 436.53543 l
51.023621 436.53543 l
h
51.023621 425.19684 m
S
0 i
1 1 1 sc
CM
55.023621 108.48032 m
69.196854 108.48032 l
69.196854 97.141731 l
55.023621 97.141731 l
h
55.023621 108.48032 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 4 511 cm
51.023621 402.51968 m
65.196854 402.51968 l
65.196854 413.85828 l
51.023621 413.85828 l
h
51.023621 402.51968 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 144.20866 90.814964 cm
/F1.1[ 8 0 0 -8 0 0]sf
-43.348 -7.3359985 m
(0%+1",&'"&234&+1$,#%+,)[ 2.368000 2.664000 4.296000 6.824000 4.296000 4.000000 2.224000 4.744000 4.296000 2.224000 4.448000 4.448000 4.448000 2.224000 4.296000 6.824000 4.592000 4.000000 2.520000 2.664000 4.296000 0.000000 ] xS
-44.383999 2.8880005 m
(5$1&,*6"%6$,\)78$&'"&49)[ 4.296000 4.592000 6.824000 2.224000 4.000000 4.448000 4.744000 4.296000 2.664000 4.744000 4.592000 4.000000 1.776000 4.296000 4.296000 4.592000 2.224000 4.744000 4.296000 2.224000 4.448000 0.000000 ] xS
-16.596001 13.112 m
(+1$,#%+,)[ 4.296000 6.824000 4.592000 4.000000 2.520000 2.664000 4.296000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
55.023621 97.141731 m
69.196854 97.141731 l
69.196854 85.803154 l
55.023621 85.803154 l
h
55.023621 97.141731 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 4 511 cm
51.023621 413.85828 m
65.196854 413.85828 l
65.196854 425.19684 l
51.023621 425.19684 l
h
51.023621 413.85828 m
S
0 i
1 1 1 sc
CM
55.023621 142.49606 m
69.196854 142.49606 l
69.196854 131.15749 l
55.023621 131.15749 l
h
55.023621 142.49606 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 4 511 cm
51.023621 368.50394 m
65.196854 368.50394 l
65.196854 379.84253 l
51.023621 379.84253 l
h
51.023621 368.50394 m
S
0 i
1 1 1 sc
CM
55.023621 165.17323 m
69.196854 165.17323 l
69.196854 153.83464 l
55.023621 153.83464 l
h
55.023621 165.17323 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 4 511 cm
51.023621 345.82678 m
65.196854 345.82678 l
65.196854 357.16534 l
51.023621 357.16534 l
h
51.023621 345.82678 m
S
0 i
1 1 1 sc
CM
55.023621 187.8504 m
69.196854 187.8504 l
69.196854 176.51181 l
55.023621 176.51181 l
h
55.023621 187.8504 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 4 511 cm
51.023621 323.1496 m
65.196854 323.1496 l
65.196854 334.48819 l
51.023621 334.48819 l
h
51.023621 323.1496 m
S
0.45357099 0.45357099 0.45357099 sc
65.196854 300.47244 m
119.05511 300.47244 l
S
0 i
1 1 1 sc
CM
55.023621 210.52756 m
69.196854 210.52756 l
69.196854 199.18898 l
55.023621 199.18898 l
h
55.023621 210.52756 m
f
0.60000002 i
0 0.36078432 0.36470589 sc
1 0 0 -1 4 511 cm
51.023621 300.47244 m
65.196854 300.47244 l
65.196854 311.81104 l
51.023621 311.81104 l
h
51.023621 300.47244 m
S
/Cs2 SC
0.75 sc
65.196854 323.1496 m
133.22835 371.33859 l
133.22835 371.33859 l
133.22835 371.33859 l
S
0 i
/Cs1 SC
1 1 1 sc
CM
55.023621 131.15749 m
69.196854 131.15749 l
69.196854 119.8189 l
55.023621 119.8189 l
h
55.023621 131.15749 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 4 511 cm
51.023621 379.84253 m
65.196854 379.84253 l
65.196854 391.18109 l
51.023621 391.18109 l
h
51.023621 379.84253 m
S
/Cs2 SC
0.75 sc
65.196854 311.81104 m
133.22835 325.98425 l
S
/Cs1 SC
0.45357099 0.45357099 0.45357099 sc
65.196854 311.81104 m
119.05511 345.82678 l
119.05511 345.82678 l
S
0 i
1 1 1 sc
CM
55.023621 153.83464 m
69.196854 153.83464 l
69.196854 142.49606 l
55.023621 142.49606 l
h
55.023621 153.83464 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 4 511 cm
51.023621 357.16534 m
65.196854 357.16534 l
65.196854 368.50394 l
51.023621 368.50394 l
h
51.023621 357.16534 m
S
0 i
1 1 1 sc
CM
55.023621 176.51181 m
69.196854 176.51181 l
69.196854 165.17323 l
55.023621 165.17323 l
h
55.023621 176.51181 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 4 511 cm
51.023621 334.48819 m
65.196854 334.48819 l
65.196854 345.82678 l
51.023621 345.82678 l
h
51.023621 334.48819 m
S
0 i
1 1 1 sc
CM
55.023621 199.18898 m
69.196854 199.18898 l
69.196854 187.8504 l
55.023621 187.8504 l
h
55.023621 199.18898 m
f
0.60000002 i
0.69411767 0 0.10980392 sc
1 0 0 -1 4 511 cm
51.023621 311.81104 m
65.196854 311.81104 l
65.196854 323.1496 l
51.023621 323.1496 l
h
51.023621 311.81104 m
S
0 i
1 1 1 sc
CM
55.023621 119.8189 m
69.196854 119.8189 l
69.196854 108.48032 l
55.023621 108.48032 l
h
55.023621 119.8189 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 4 511 cm
51.023621 391.18109 m
65.196854 391.18109 l
65.196854 402.51968 l
51.023621 402.51968 l
h
51.023621 391.18109 m
S
ep
end
%%Trailer
%%EOF
